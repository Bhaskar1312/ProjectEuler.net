package problems_2_to_25;
//incomplete
public class Problem12 {
	public static void main(String[] args) {

	long term=1L;
	for(int i=1;i<=27;i++)
		term=term*2;
	term--;
	long n=(term*(term+1))/2;
	long x= factors(n,term);
	while(x<=1000) {
		if(x >=500) {
			System.out.println(x);break;
		}
		term=term*2+1;// 2x+1or change it 2pow and then term--
		n=(term*(term+1))/2;
		x= factors(n,term);
		System.out.println(n+"\t"+x);
	}
	
}

//	private static int factors(long n) {
//		long factor=1L;
//		int count=0;
//		while(factor<=n) {
//			if(n%factor==0)
//				count++;
//			factor++;
//		}
//		return count;
//	}
	private static long factors(long n, long term) {
		int count=1;long factor=2L;
		while(n%factor==0) {
			if(n%factor==0)
				count++;
			factor++;
		}
		return count*term;
	}
}
/** The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

You can search from when n or n+1 = 2 power 26 27 or 2^29*/